[package]
name = "linkerd2-app-core"
version = "0.1.0"
authors = ["Linkerd Developers <cncf-linkerd-dev@lists.cncf.io>"]
edition = "2018"
publish = false
description = """
Core infrastructure for the proxy application

This crate conglomerates proxy configuration, runtime administration, etc,
independently of the inbound and outbound proxy logic.
"""

[features]
mock-orig-dst  = ["linkerd2-proxy-transport/mock-orig-dst"]

[dependencies]
bytes = "0.5"
http = "0.2"
http-body = "0.3"
hyper = "0.13"
futures = { version = "0.3" }
indexmap = "1.0"
linkerd2-addr = { path = "../../addr" }
linkerd2-admit = { path = "../../admit" }
linkerd2-cache = { path = "../../cache" }
linkerd2-box = { path = "../../box" }
linkerd2-buffer = { path = "../../buffer" }
linkerd2-concurrency-limit = { path = "../../concurrency-limit" }
linkerd2-conditional = { path = "../../conditional" }
linkerd2-dns = { path = "../../dns" }
linkerd2-drain = { path = "../../drain" }
linkerd2-duplex = { path = "../../duplex" }
linkerd2-errno = { path = "../../errno" }
linkerd2-error = { path = "../../error" }
linkerd2-error-metrics = { path = "../../error-metrics" }
linkerd2-error-respond = { path = "../../error-respond" }
linkerd2-exp-backoff = { path = "../../exp-backoff" }
linkerd2-http-classify = { path = "../../http-classify" }
linkerd2-http-metrics = { path = "../../http-metrics" }
linkerd2-lock = { path = "../../lock" }
linkerd2-metrics = { path = "../../metrics" }
linkerd2-opencensus = { path = "../../opencensus" }
linkerd2-proxy-core = { path = "../../proxy/core" }
linkerd2-proxy-api = { git = "https://github.com/linkerd/linkerd2-proxy-api", tag = "v0.1.12" }
linkerd2-proxy-api-resolve = { path = "../../proxy/api-resolve" }
linkerd2-proxy-detect = { path = "../../proxy/detect" }
linkerd2-proxy-discover = { path = "../../proxy/discover" }
linkerd2-proxy-identity = { path = "../../proxy/identity" }
linkerd2-proxy-http = { path = "../../proxy/http" }
linkerd2-proxy-resolve = { path = "../../proxy/resolve" }
linkerd2-proxy-tap = { path = "../../proxy/tap" }
linkerd2-proxy-tcp = { path = "../../proxy/tcp" }
linkerd2-proxy-transport = { path = "../../proxy/transport" }
linkerd2-reconnect = { path = "../../reconnect" }
linkerd2-request-filter = { path = "../../request-filter" }
linkerd2-retry = { path = "../../retry" }
linkerd2-router = { path = "../../router" }
linkerd2-timeout = { path = "../../timeout" }
linkerd2-service-profiles = { path = "../../service-profiles" }
linkerd2-stack = { path = "../../stack" }
linkerd2-stack-metrics = { path = "../../stack/metrics" }
linkerd2-stack-tracing = { path = "../../stack/tracing" }
linkerd2-trace-context = { path = "../../trace-context" }
rand = { version = "0.7", features = ["small_rng"] }
regex = "1.0.0"
tokio = { version = "0.2", features = ["macros", "sync"]}
tokio-timer = "0.2"
tower-balance = { git = "https://github.com/tower-rs/tower" }
tower-load = { git = "https://github.com/tower-rs/tower" }
tower-request-modifier = { git = "https://github.com/tower-rs/tower-http" }
tower-spawn-ready = { git = "https://github.com/tower-rs/tower" }
tonic = { version = "0.2", default-features = false, features = ["prost"] }
tracing = "0.1.9"
tracing-futures = { version = "0.2", features = ["futures"] }
tracing-log = "0.1"
pin-project = "0.4"

[dependencies.tracing-subscriber]
version = "0.2.1"
# we don't need `chrono` time formatting
default-features = false
features = ["env-filter", "fmt", "smallvec", "tracing-log", "ansi"]

[dependencies.tower]
version = "0.3"
# disable tower's tracing `log` integration for performance reasons, since we
# will consume tower's traces as traces.
default-features = false
features = [
    "util",
    "make",
    "timeout",
    "spawn-ready"
]

[target.'cfg(target_os = "linux")'.dependencies]
libc = "0.2"
procinfo = "0.4.2"

[dev-dependencies]
linkerd2-test-util = { path = "../../test-util" }
linkerd2-proxy-api = { git = "https://github.com/linkerd/linkerd2-proxy-api", features = ["arbitrary"], tag = "v0.1.12" }
prost-types = "0.5.0"
quickcheck = { version = "0.9", default-features = false }
