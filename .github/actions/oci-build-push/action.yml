name: oci-build-push
description: Builds and pushes OCI images from the workspace context

inputs:
  cache-from:
    required: false
  cache-to:
    required: false
  features:
    required: false
  outputs:
    required: false
  profile:
    required: false
    default: release
    description: Build profile
  platforms:
    required: false
    default: linux/amd64,linux/arm64
  push:
    required: false
  rustflags:
    required: false
    default: -D warnings -A deprecated --cfg tokio_unstable
  target:
    required: false
    default: bin
  vendor:
    required: false
  version:
    required: false

outputs:
  imageid:
    description: The ID of the built image
    value: ${{ steps.build.outputs.imageid }}
  digest:
    description: The digest of the built image
    value: ${{ steps.build.outputs.digest }}
  metadata:
    description: The metadata of the built image
    value: ${{ steps.build.outputs.metadata }}

runs:
  using: composite
  steps:
    - uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f
      id: meta
      with:
        images: |
          ghcr.io/${{ github.repository_owner }}/proxy
        tags: |
          type=raw,value=${{ inputs.version }}
        flavor: |
          latest=false
          prefix=bin-
    - if: inputs.platforms != 'linux/amd64'
      uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392
    - uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435
    - uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
      id: build
      with:
        build-args: |
          LINKERD2_PROXY_VENDOR=${{ inputs.vendor }}
          LINKERD2_PROXY_VERSION=${{ inputs.version }}
          PROFILE=${{ inputs.profile }}
          PROXY_FEATURES=${{ inputs.features }}
          RUSTFLAGS=${{ inputs.rustflags }}
        cache-from: type=gha,scope=${{ inputs.cache-from }}
        cache-to: type=gha,scope=${{ inputs.cache-to }},mode=max
        context: .
        outputs: ${{ inputs.outputs }}
        platforms: ${{ inputs.platforms }}
        push: ${{ inputs.push }}
        target: ${{ inputs.target }}
        annotations: ${{ steps.meta.outputs.annotations }}
        labels: ${{ steps.meta.outputs.labels }}
        tags: ${{ steps.meta.outputs.tags }}

