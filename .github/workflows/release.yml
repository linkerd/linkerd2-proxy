name: release

on:
  pull_request:
    paths:
      - .github/actions/package/*
      - .github/workflows/release.yml
      - justfile
  push:
    tags:
      - "release/*"

permissions:
  contents: write

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  CHECKSEC_VERSION: 2.5.0
  RUSTFLAGS: "-D warnings -A deprecated"
  RUSTUP_MAX_RETRIES: 10

jobs:
  meta:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
      - id: meta
        shell: bash
        run: |
          shopt -s extglob
          ref="${{ github.ref }}"
          if [[ "$ref" == refs/tags/release/* ]]; then
            ver="${ref##refs/tags/release/}"
            if [[ "$ver" != v+([0-9]).+([0-9]).+([0-9])?(-+([a-z0-9-])) ]]; then
              echo "Invalid version: $ver" >&2
              exit 1
            fi
            echo ::set-output name=publish::true
            echo ::set-output name=version::"$ver"
          else
            sha="${{ github.sha }}"
            echo ::set-output name=version::"test-${sha:0:7}"
          fi
    outputs:
      publish: ${{ steps.meta.outputs.publish }}
      version: ${{ steps.meta.outputs.version }}

  package:
    needs: [meta]
    strategy:
      matrix:
        arch: [amd64, arm64, arm]
    # If we're not actually building on a release tag, don't short-circuit on
    # errors. This helps us know whether a failure is platform-specific.
    continue-on-error: ${{ !needs.meta.outputs.publish }}
    name: Package (${{ matrix.arch }})
    runs-on: ubuntu-latest
    timeout-minutes: 40
    container:
      image: docker://rust:1.63.0-bullseye
    steps:
      - uses: extractions/setup-just@aa5d15c144db4585980a44ebfdd2cf337c4f14cb
      - run: apt update
      - run: apt install -y jq
      - name: Install checksec
        run: |
          cd /usr/local/bin && \
          curl -vsLO "https://raw.githubusercontent.com/slimm609/checksec.sh/${CHECKSEC_VERSION}/checksec" && \
          chmod 755 checksec
      - if: matrix.arch == 'arm64'
        name: Setup arm64
        run: |
          rustup target add aarch64-unknown-linux-gnu
          apt-get install -y --no-install-recommends g++-aarch64-linux-gnu libc6-dev-arm64-cross
      - if: matrix.arch == 'arm'
        name: Setup arm
        run: |
          rustup target add armv7-unknown-linux-gnueabihf
          apt-get install -y --no-install-recommends g++-arm-linux-gnueabihf libc6-dev-armhf-cross
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8
      - run: just fetch
      - name: Run just package
        run: just build_type=release package_arch=${{ matrix.arch }}  package_version=${{ needs.meta.outputs.version }} package
      - uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8
        with:
          name: ${{ matrix.arch }}-artifacts
          path: target/package/*

  publish:
    needs: [meta, package]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741
        with:
          path: artifacts
      - run: du -h artifacts/**/*
      - if: needs.meta.outputs.publish
        uses: softprops/action-gh-release@1e07f4398721186383de40550babbdf2b84acfc5
        with:
          name: ${{ needs.meta.outputs.version }}
          files: artifacts/**/*
          generate_release_notes: true
