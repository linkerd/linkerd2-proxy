# Each job should typically run in under 5 minutes.
name: fast

on:
  pull_request: {}

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short
  RUSTUP_MAX_RETRIES: 10

permissions:
  contents: read

jobs:

  # Linting
  check-clippy:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    container:
      image: docker://rust:1.56.0-buster
    steps:
      - uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579
      - run: rustup component add clippy
      - run: cargo clippy --all --exclude=linkerd-meshtls-boring

  # Enforce automated formatting.
  check-fmt:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    container:
      image: docker://rust:1.56.0-buster
    steps:
      - uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579
      - run: rustup component add rustfmt
      - run: make check-fmt

  # Generate docs.
  check-docs:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    container:
      image: docker://rust:1.56.0-buster
    steps:
      - uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579
      - run: |
          cargo doc --all --no-deps \
            --exclude=linkerd-meshtls \
            --exclude=linkerd-meshtls-boring \
            --exclude=linkerd-meshtls-rustls

  # Test the meshtls backends.
  test-meshtls:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    container:
      image: docker://rust:1.56.0-buster
    steps:
      - run: apt update && apt install -y cmake clang golang # for boring
      - uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579
      - working-directory: ./linkerd/meshtls
        run: cargo test --all-features --no-run
      - working-directory: ./linkerd/meshtls
        run: cargo test --all-features
      - working-directory: ./linkerd/meshtls
        run: |
          cargo test --no-run \
            --package=linkerd-meshtls-boring \
            --package=linkerd-meshtls-rustls
      - working-directory: ./linkerd/meshtls
        run: |
          cargo test \
            --package=linkerd-meshtls-boring \
            --package=linkerd-meshtls-rustls
      - working-directory: linkerd/meshtls
        run: |
          cargo doc --all-features --no-deps \
            --package=linkerd-meshtls \
            --package=linkerd-meshtls-boring \
            --package=linkerd-meshtls-rustls
      # Run clippy on the boring components while we have the dependencies installed.
      - run: rustup component add clippy
      - working-directory: linkerd/meshtls
        run: cargo clippy --features=boring --all-targets

  # Run non-integration tests. This should be quick.
  test-unit:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    container:
      image: docker://rust:1.56.0-buster
    steps:
      - uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579
      - run: |
          cargo test --all --no-run \
            --exclude=linkerd-app \
            --exclude=linkerd-app-admin \
            --exclude=linkerd-app-core \
            --exclude=linkerd-app-gateway \
            --exclude=linkerd-app-inbound \
            --exclude=linkerd-app-integration \
            --exclude=linkerd-app-outbound \
            --exclude=linkerd-app-test \
            --exclude=linkerd-meshtls \
            --exclude=linkerd-meshtls-boring \
            --exclude=linkerd-meshtls-rustls \
            --exclude=linkerd2-proxy
      - run: |
          cargo test --all \
            --exclude=linkerd-app \
            --exclude=linkerd-app-admin \
            --exclude=linkerd-app-core \
            --exclude=linkerd-app-gateway \
            --exclude=linkerd-app-inbound \
            --exclude=linkerd-app-integration \
            --exclude=linkerd-app-outbound \
            --exclude=linkerd-app-test \
            --exclude=linkerd-meshtls \
            --exclude=linkerd-meshtls-boring \
            --exclude=linkerd-meshtls-rustls \
            --exclude=linkerd2-proxy

  # Check for security advisories.
  #
  # TODO(ver): This should open issues against the linkerd2 repo (and be run in a cron).
  deps-advisories:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    # Prevent sudden announcement of a new advisory from failing Ci.
    continue-on-error: true
    steps:
    - uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579
    - uses: EmbarkStudios/cargo-deny-action@0ca727bbae7b7b578b9a5f98186caac35aa2a00d
      with:
        command: check advisories

  # Audit licenses, unreleased crates, and unexpected duplicate versions.
  deps-bans:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579
    - uses: EmbarkStudios/cargo-deny-action@0ca727bbae7b7b578b9a5f98186caac35aa2a00d
      with:
        command: check bans licenses sources
