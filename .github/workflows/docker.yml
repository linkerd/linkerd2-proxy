# Ensures that the local development dockerfile builds properly.
#
# The resulting Docker image is discarded.
name: Docker

on:
  push:
    branches:
    - master
    paths:
    - 'Cargo.lock'
    - 'Dockerfile'
  pull_request:
    paths:
    - 'Cargo.lock'
    - 'Dockerfile'

env:
  DOCKER_UNOPTIMIZED: "1"

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1

    # Create a build image on a Linkerd build host.
    - name: Setup (Origin)
      if: '!github.event.pull_request.head.repo.fork'
      run: |
        mkdir -p ~/.ssh
        # Create an identity file and protect before writing contents to it.
        touch ~/.ssh/id && chmod 600 ~/.ssh/id
        echo "${{ secrets.DOCKER_PRIVATE_KEY }}" >~/.ssh/id
        # Use well-known public keys for the host to prevent middlemen.
        echo "${{ secrets.DOCKER_KNOWN_HOSTS }}" >~/.ssh/known_hosts
        # Configure host with ServerAliveInterval to ensure that the client
        # stays alive even when the server is busy emitting nothing.
        # ServerAliveCountMax ensures that server responds to these pings
        # within ~5 minutes.
        (
          echo "Host linkerd-docker"
          echo "    User github"
          echo "    Hostname ${{ secrets.DOCKER_ADDRESS }}"
          echo "    IdentityFile ~/.ssh/id"
          echo "    BatchMode yes"
          echo "    ServerAliveInterval 60"
          echo "    ServerAliveCountMax 5"
        ) >~/.ssh/config
        # Confirm that the SSH configuration works.
        ssh linkerd-docker docker version

    - name: Docker (Origin)
      if: '!github.event.pull_request.head.repo.fork'
      env:
        DOCKER_HOST: "ssh://linkerd-docker"
      run: |
        export DOCKER_TAG="proxy-ci:$(dd bs=64 count=1 if=/dev/urandom status=none | tr -dc 'a-zA-Z0-9')"
        make docker
        docker image rm -f "$DOCKER_TAG"

    - name: Docker (Fork)
      if: github.event.pull_request.head.repo.fork
      run: make docker
